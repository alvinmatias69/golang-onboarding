// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package todo is a generated GoMock package.
package todo

import (
	context "context"
	reflect "reflect"

	todo "github.com/alvinmatias69/golang-onboarding/internal/model/todo"
	gomock "github.com/golang/mock/gomock"
)

// MocktodoUseCase is a mock of todoUseCase interface.
type MocktodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MocktodoUseCaseMockRecorder
}

// MocktodoUseCaseMockRecorder is the mock recorder for MocktodoUseCase.
type MocktodoUseCaseMockRecorder struct {
	mock *MocktodoUseCase
}

// NewMocktodoUseCase creates a new mock instance.
func NewMocktodoUseCase(ctrl *gomock.Controller) *MocktodoUseCase {
	mock := &MocktodoUseCase{ctrl: ctrl}
	mock.recorder = &MocktodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktodoUseCase) EXPECT() *MocktodoUseCaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MocktodoUseCase) Add(ctx context.Context, payload todo.TodoCreatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MocktodoUseCaseMockRecorder) Add(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MocktodoUseCase)(nil).Add), ctx, payload)
}

// List mocks base method.
func (m *MocktodoUseCase) List(ctx context.Context, filter todo.TodoFilter) ([]todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MocktodoUseCaseMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MocktodoUseCase)(nil).List), ctx, filter)
}

// MarkAsDone mocks base method.
func (m *MocktodoUseCase) MarkAsDone(ctx context.Context, taskID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDone", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDone indicates an expected call of MarkAsDone.
func (mr *MocktodoUseCaseMockRecorder) MarkAsDone(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDone", reflect.TypeOf((*MocktodoUseCase)(nil).MarkAsDone), ctx, taskID)
}
